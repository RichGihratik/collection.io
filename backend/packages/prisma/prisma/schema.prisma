generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Users
// ======================================

enum UserRole {
  CUSTOMER @map("customer")
  ADMIN    @map("admin")
}

enum UserStatus {
  ACTIVE
  BLOCKED
}

model User {
  id                Int                @id @default(autoincrement())
  role              UserRole           @default(CUSTOMER)
  createdAt         DateTime           @default(now())
  lastLogin         DateTime           @default(now())
  status            UserStatus         @default(ACTIVE)
  name              String
  email             String             @unique
  hash              String
  collections       Collection[]
  collectionRatings CollectionRating[]
  itemLikes         ItemLike[]
  comments          ItemComment[]
  commentLikes      ItemCommentLike[]
}

// Collections
// ======================================

enum FieldType {
  INT       @map("int")
  TEXT      @map("text")
  RICH_TEXT @map("richtext")
  BOOL      @map("bool")
  DATE      @map("date")
}

model Collection {
  id          Int                @id @default(autoincrement())
  name        String
  description String
  theme       CollectionTheme?   @relation(fields: [themeId], references: [id], onDelete: SetNull)
  themeId     Int?
  owner       User               @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId     Int
  fields      FieldConfig[]
  items       Item[]
  ratings     CollectionRating[]
}

model FieldConfig {
  collection   Collection  @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int
  name         String
  type         FieldType   @map("fieldType")
  values       ItemValue[]

  @@id([name, collectionId])
}

model Item {
  id           Int           @id @default(autoincrement())
  name         String
  collection   Collection    @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int
  fields       ItemValue[]
  comments     ItemComment[]
  likes        ItemLike[]
  tags         ItemTag[]
}

model CollectionTheme {
  id          Int          @id @default(autoincrement())
  name        String
  collections Collection[]
}

model ItemTag {
  id    Int    @id @default(autoincrement())
  name  String
  items Item[]
}

model ItemValue {
  value        String
  config       FieldConfig @relation(fields: [fieldName, collectionId], references: [name, collectionId], onDelete: Cascade)
  fieldName    String
  collectionId Int
  item         Item        @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId       Int

  @@id([itemId, fieldName, collectionId])
}

// Rating
// ======================================

model ItemCommentLike {
  owner     User        @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId   Int
  like      Boolean
  comment   ItemComment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int

  @@id([commentId, ownerId])
}

model CollectionRating {
  rating       Int
  owner        User       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId      Int
  collection   Collection @relation(fields: [collectionId], references: [id], onDelete: Cascade)
  collectionId Int

  @@id([ownerId, collectionId])
}

model ItemLike {
  owner   User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  ownerId Int
  like    Boolean
  item    Item    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId  Int

  @@id([itemId, ownerId])
}

// Comments
// ======================================

model ItemComment {
  id        Int               @id @default(autoincrement())
  item      Item              @relation(fields: [itemId], references: [id], onDelete: Cascade)
  itemId    Int
  author    User              @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId  Int
  createdAt DateTime          @default(now())
  updatedAt DateTime          @updatedAt
  likes     ItemCommentLike[]
  content   String
}
